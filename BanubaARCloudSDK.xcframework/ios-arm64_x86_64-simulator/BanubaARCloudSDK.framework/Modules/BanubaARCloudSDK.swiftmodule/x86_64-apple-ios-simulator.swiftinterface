// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BanubaARCloudSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import BanubaARCloudSDK
import BanubaUtilities
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public protocol AREffect {
  @objc var title: Swift.String { get }
  @objc var previewImage: Foundation.URL { get }
  @objc var downloadLink: Foundation.URL { get }
  @objc var isDownloaded: Swift.Bool { get }
  @objc var localURL: Foundation.URL? { get set }
  @objc var type: Swift.String? { get }
}
public typealias DownloadEffectRequestId = Swift.UInt
extension Swift.UInt {
  public static var invalid: BanubaARCloudSDK.DownloadEffectRequestId {
    get
  }
}
@objc final public class BanubaARCloud : ObjectiveC.NSObject {
  @objc required public init(arCloudUrl: Swift.String, effectsFolderURL: Foundation.URL)
  @objc final public func getAREffects(completion: @escaping ([any BanubaARCloudSDK.AREffect]?, Foundation.NSError?) -> Swift.Void)
  @objc final public func getArEffectPreview(_ effect: any BanubaARCloudSDK.AREffect, completion: @escaping (UIKit.UIImage?, Foundation.NSError?) -> Swift.Void)
  @discardableResult
  @objc final public func downloadArEffect(_ effect: any BanubaARCloudSDK.AREffect, downloadProgress: ((Swift.Double) -> Swift.Void)?, completion: @escaping (Foundation.URL?, Foundation.NSError?) -> Swift.Void) -> BanubaARCloudSDK.DownloadEffectRequestId
  @objc final public func cancelDownloadingEffect(withRequestId requestId: BanubaARCloudSDK.DownloadEffectRequestId)
  @objc public static func application(_: UIKit.UIApplication, handleEventsForBackgroundURLSession identifier: Swift.String, completionHandler: @escaping () -> Swift.Void)
  @objc deinit
}
