// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BanubaARCloudSDK
@_exported import BanubaARCloudSDK
import Foundation
import Swift
import SystemConfiguration
import UIKit
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public enum Connection : Swift.CustomStringConvertible {
  case none, wifi, cellular
  public var description: Swift.String {
    get
  }
  public static func == (a: BanubaARCloudSDK.Connection, b: BanubaARCloudSDK.Connection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class Reachability {
  public typealias NetworkReachable = (BanubaARCloudSDK.Reachability) -> ()
  public typealias NetworkUnreachable = (BanubaARCloudSDK.Reachability) -> ()
  @available(*, unavailable, renamed: "Conection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: BanubaARCloudSDK.Reachability.NetworkStatus, b: BanubaARCloudSDK.Reachability.NetworkStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var whenReachable: BanubaARCloudSDK.Reachability.NetworkReachable?
  public var whenUnreachable: BanubaARCloudSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: BanubaARCloudSDK.Connection {
    get
  }
  public var connection: BanubaARCloudSDK.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability)
  convenience public init?(hostname: Swift.String)
  convenience public init?()
  @objc deinit
}
extension Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc public protocol AREffect {
  @objc var title: Swift.String { get }
  @objc var previewImage: Foundation.URL { get }
  @objc var downloadLink: Foundation.URL { get }
  @objc var isDownloaded: Swift.Bool { get }
  @objc var localPath: Foundation.URL? { get set }
}
@_hasMissingDesignatedInitializers public class ConnectionListener {
  final public let onConnectionChanged: ((BanubaARCloudSDK.Connection) -> ())
  @objc deinit
}
public protocol ReachabilityServicing {
  var currentConnection: BanubaARCloudSDK.Connection { get }
  var isInternetAvailable: Swift.Bool { get }
  func listenConnection(onConnectionChanged: @escaping ((BanubaARCloudSDK.Connection) -> ())) -> BanubaARCloudSDK.ConnectionListener
  func stopListenConnection(for connectionListener: BanubaARCloudSDK.ConnectionListener)
}
public struct ReachabilityServiceBuilder {
}
public typealias DownloadEffectRequestId = Swift.UInt
extension UInt {
  public static var invalid: BanubaARCloudSDK.DownloadEffectRequestId {
    get
  }
}
@objc public class BanubaARCloud : ObjectiveC.NSObject {
  @objc public var effectsFolderURL: Foundation.URL {
    @objc get
  }
  @objc required public init(uuidString: Swift.String)
  @objc public func getAREffects(completion: @escaping ([BanubaARCloudSDK.AREffect]?, Foundation.NSError?) -> Swift.Void)
  @objc public func getArEffectPreview(_ effect: BanubaARCloudSDK.AREffect, completion: @escaping (UIKit.UIImage?, Foundation.NSError?) -> Swift.Void)
  @discardableResult
  @objc public func downloadArEffect(_ effect: BanubaARCloudSDK.AREffect, downloadProgress: ((Swift.Double) -> Swift.Void)?, completion: @escaping (Foundation.URL?, Foundation.NSError?) -> Swift.Void) -> BanubaARCloudSDK.DownloadEffectRequestId
  @objc public func cancelDownloadingEffect(withRequestId requestId: BanubaARCloudSDK.DownloadEffectRequestId)
  @objc deinit
  @objc override dynamic public init()
}
extension BanubaARCloudSDK.Connection : Swift.Equatable {}
extension BanubaARCloudSDK.Connection : Swift.Hashable {}
@available(*, unavailable, renamed: "Conection")
extension BanubaARCloudSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Conection")
extension BanubaARCloudSDK.Reachability.NetworkStatus : Swift.Hashable {}
